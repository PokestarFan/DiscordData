ID,Channel,Content Length,Content
560624853645000715,programming,60,I've been doodling around with making my own compiler today.
560625090169929739,programming,124,I decided not to tokenize all of the characters and digits in identifiers and numeric literals 'cause I kinda don't have to?
560625148944711700,programming,106,And going out of my way to do that makes a lot more work to put those things back together properly later.
560625169677287424,programming,34,A side effect is I get to do this:
560625187469656074,programming,47,```NL0xafe_starts_with_a_number :int = 0xafe;```
560625237847310336,programming,19,Tokenizer's output:
560625277525426196,programming,468,```NLLine:                        Token:                   Token Type:NL00001    0xafe_starts_with_a_number                  ALPHANUMERICNL00001                             :                   TYPE_MARKERNL00001                           int                  ALPHANUMERICNL00001                             =                    ASSIGNMENTNL00001                         0xafe           HEXADECIMAL_LITERALNL00001                             ;                   END_OF_LINE```
560625674063183872,programming,205,My thinking is I can define numbers in the grammar in such a way that the parser looks for BINARY_LITERAL_ HEXADECIMAL_LITERAL_ or DECIMAL_LITERAL tokens instead of caring about the contents of the tokens.
560625744573759489,programming,80,'Cause the lexer already ensures those will be put together and tagged properly.
560628306182144001,programming,97,The parser would care if it were looking to make sure that the token matched the production rule.
560628546104721428,programming,39,```NLnumber = 1-9NLnumber = 1-9 number```
560628553712926735,programming,16,that kinda thing
560628620008357891,programming,63,the parser would need to check that the token fits the terminal
560628758306881622,programming,20,the production rules
560628782440906752,programming,24,for how to build numbers
560628950120792073,programming,35,i think that's what i was thinking/
560628987722858496,programming,44,since i'm not splitting up numbers per digit
560629037878476800,programming,44,i just define the production rule like this:
560629144233181185,programming,84,```NLnumber = BINARY_LITERALNLnumber = HEXADECIMAL_LITERALNLnumber = DECIMAL_LITERAL```
560629187031859211,programming,82,and give the parser some way to understand that i'm talking about token type there
560629264974610442,programming,66,Consider the case where I tokenized all of the digits in a number.
560629312265519122,programming,80,The parser would have to realize all of the digits were part of a single number.
560629409372045334,programming,118,Meaning it'd have to check the contents of the tokens to make sure they matched the terminals in the production rules.
560629758489001984,programming,60,I'm not sure why you're having a hard time understanding me.
560629793889058846,programming,45,In the case where 999 got tokenized to 9 9 9.
560629971949715467,programming,118,Then it'd need to look at the contents of the tokens rather than just being happy that they're numeric literal tokens.
560630103969890305,programming,21,I'm doing the latter.
560630518572646411,programming,185,The interesting bit was I wound up in a situation where I can start identifiers with numbers_ which is only interesting because I don't recall seeing any serious languages ever do that.
560630532661313536,programming,17,But it's trivial.
560630618539687949,programming,44,So I'm wondering why that isn't more common.
560630941073276929,programming,5,Well.
560631096358993930,programming,67,If someone makes a variable like 0x1af6gfe43_ that's his own fault.
560631123722633216,programming,40,Just like using single letter variables.
560631169050214401,programming,63,Or variables whose names have nothing to do with their purpose.
560631307693195292,programming,9,It's not.
560631317255946249,programming,16,That's my point.
560631384083791909,programming,3,Uh.
560631386906689554,programming,3,No.
560631405990772746,programming,29,That was an exaggerated case.
560631484097232896,programming,43,But I might want something like 2hard2code.
560631544281300993,programming,39,In that case it's not confusing at all.
560631589743362048,programming,38,You're kind of missing the point_ tbh.
560631648966672385,programming,26,Something like that_ sure.
560631684047831071,programming,22,Yeah_ and that's fine.
560631795914375188,programming,144,Every sane developer will follow decent naming conventions outside of the few situations where having a number at the start makes perfect sense.
560631809268776960,programming,26,And the insane devs_ well.
560631820857901087,programming,24,There's no helping them.
560631870921113600,programming,54,They already have plenty of tools to shoot their feet.
560631909152063497,programming,7,I mean.
560631972183932929,programming,97,I had originally thought it was because it was just too hard to get compilers to understand that.
560632016404742155,programming,56,The topic got swept under the rug with that explanation.
560632067885629470,programming,58,But now that I'm looking at it_ it's clearly not an issue.
560632111590015018,programming,7,I mean.
560632181404467201,programming,43,I don't think it really makes things worse.
560632344587796510,programming,3,ken
560632349654515743,programming,9,nice edit
