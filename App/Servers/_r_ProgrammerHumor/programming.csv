ID,Author,Content Length,Content
558778623692242984,Kyro,83,I finally made the `if (x = 0) {` bug for the first time in my programming career 🎉
558785611230609428,emccue,30,what program were you writing?
558811658881990668,bread,138,<@403919257873678348> sometimes_ just to confuse my business partner_ I write `while (x = 8) {` because it comes out as true until broken.
558811728809426957,bread,29,I get frequent texts about it
558811822719762452,somebody,35,<@314205761846902788> what language
558812679829979136,bread,20,Mostly in our Python
558813499862810634,bread,104,and in our Java_ but that's because anything that's not false or 0 returns true in the of statement IIRC
558813710404026369,Kyro,23,You can't do it in Java
558813884392407080,bread,7,I use 1
558813940218462239,bread,38,since the assignment returns the value
558814007251697665,bread,15,1 works as true
558814525076275200,somebody,3,uhm
558814601651683369,somebody,55,assignment expressions were introduced in python in 3.8
558814649332662279,somebody,52,in Java 1 doesn't work as true <@314205761846902788>
558814716537864202,somebody,51,in python_ yes. in Java_ it's not a `boolean` so no
558815116297240586,Kyro,58,And I was using a language that doesn't even have booleans
558816040390492160,Kyro,72,But because of Java I'm used to explicitly saying `x==0` instead of `!x`
558817301705785345,bread,44,You right_ it's not in my Androi dcode_ my b
558817595894005808,bread,30,It's in the C++ part of my JVM
558831809010597900,MemoryError,41,is there a way to append to an array in C
558831836588146738,MemoryError,16,not linked lists
558832006050611203,MemoryError,88,i have a callback function which needs to add an item to an array every time it's called
558832055534878740,MemoryError,33,i can't figure out how to do that
558832650949754900,emccue,63,conceptually an array is not a good fit for continual appending
558832774342246411,emccue,118,If you want to do an operation like that you would be best off writing or finding your own "ArrayList" kind of wrapper
558832996619255833,MemoryError,61,is there a way to find the index of the last item in the list
558833043738198016,MemoryError,6,array*
558833123811524638,emccue,58,I think you don't quite understand what an array in c _is_
558833202815565825,emccue,34,it is a fixed size block of memory
558833229780484148,emccue,39,that you have a pointer to the start of
558833301725511700,emccue,55,it is up to you to keep track of the size of that array
558833325943554078,emccue,25,usually in a seperate int
558833389654769664,emccue,69,because you only have the pointer to the start of the block of memory
558833485142556674,emccue,95,nothing about that pointer can tell you how much memory ahead of that you are allowed to access
558833647302606849,emccue,160,so if you keep the size of the array and the pointer to the start of the array held somewhere then the "index of the last item" is something you implicitly know
558834656754008073,emccue,53,and I might be wrong when I say to store it in an int
558834705592483842,emccue,40,it might be a `usize` or some other type
558834734483111948,emccue,31,I am not super well versed in C
558834781337550857,emccue,45,and I don't have classes that make me write C
558834845690757154,emccue,28,so I have no desire to learn
558834869896085527,emccue,14,rust 2019 baby
558835036468674580,MemoryError,24,well i suppose im fucked
558835125572468737,MemoryError,22,time to check out rust
558835870220812328,MemoryError,68,if anyone can help me out with this i might consider going back to C
558836141651001375,emccue,54,The type you are looking for in rust is probably `Vec`
558836246571384832,emccue,72,can you share your problem and what you were thinking of for a solution?
558836968654503943,emccue,64,I can maybe whip up a quick A/B of what it would be in C vs rust
558837496327307287,emccue,65,Actually I am kinda bored so i could use the mindless distraction
558838364481126401,MemoryError,218,I have a function which retrieves a few rows from a database and uses a callback function to individually process each row. The callback function is supposed to map the row's data to a structure and add it to an array.
558838506462380072,emccue,46,is this for a class or for a personal project?
558838554839613452,MemoryError,16,personal project
558838627145089044,emccue,41,cool_ means you can use whatever you want
558838656161546302,emccue,8,what db?
558838663736459271,MemoryError,29,i'm experimenting with SQLite
558838685718675488,emccue,6,gotcha
558839798748676097,emccue,27,any more details than that?
558839872333414411,MemoryError,10,not really
558839938129461258,emccue,43,do you have a schema you were messing with?
558839981297106959,emccue,29,like_ the SQL you were using?
558840051308429322,MemoryError,22,not sure what you mean
558840113631592458,emccue,64,well if you are using sqlite you started off by creating a table
558840131813900289,emccue,26,and then you inserted data
558840155457454092,MemoryError,4,yeah
558840155767701514,emccue,28,and now you want to query it
558840324198236171,emccue,79,I want to stick to what you were doing so I don't have to think about sql today
558840689530765333,MemoryError,407,```cNLvoid handle_entry(void *entries_ int argc_ char **argv_ char **column_name){NL  Entry entry;NL  strcpy(entry.title_ argv[1]);NL  strcpy(entry.content_ argv[2]);NL}NLNLvoid get_entries(){NL  sqlite3 *DB;NL  sqlite3_stmt *stmt;NL  char *sql = "SELECT * FROM Entries;";NL  Entry *entries[100];NL  sqlite3_open("entries.db"_ &DB);NL  sqlite3_exec(DB_ sql_ handle_entry_ entries_ 0);NL``` this is what i was trying to do
558840733889724437,emccue,10,ahh gotcha
558840765682548756,emccue,29,whats the schema for entries?
558840905038168064,MemoryError,18,ID_ Title_ Content
558840963368484879,MemoryError,80,```cNLtypedef struct Entry {NL  int ID;NL  char title;NL  char content;NL} Entry;NL```
558841081064587275,emccue,67,thats good_ but i meant specifically the sql for creating the table
558841133334003723,emccue,23,eh whatever I can do it
558841223897546752,emccue,79,remember kids: If you try too hard to be lazy_ you are actually doing more work
558841267765641233,MemoryError,127,```NLCREATE TABLE Entries(NL              ID INTEGER PRIMARY KEY_NL              Title CHAR(512)_NL              Content TEXT);NL```
558847468926664734,emccue,32,<@467576889926483969> Here ya go
558847489017380875,emccue,1537,```rustNLuse rusqlite::{Connection_ NO_PARAMS};NLNL#[derive(Debug)]NLstruct Entry {NL    id: i64_NL    title: String_NL    content: StringNL}NLNLfn insert_entry(conn: &Connection_ entry: &Entry) -> rusqlite::Result<usize> {NL    conn.execute("\NL    INSERT INTO Entries (Title_ Content)NL        VALUES (?1_ ?2)NL    "_NL    &[&entry.title_ &entry.content])NL}NLNLfn all_entries(conn: &Connection) -> rusqlite::Result<Vec<Entry>> {NL    let mut stmt = connNL        .prepare("SELECT ID_ Title_ Content FROM Entries")?;NL    let entry_iter = stmt.query_map(NL        NO_PARAMS_NL        |row| Ok(Entry{NL            id: row.get(0)?_NL            title: row.get(1)?_NL            content: row.get(2)?NL        })NL    )?;NLNL    let mut entries = Vec::new();NL    for entry in entry_iter {NL        entries.push(entry?);NL    }NLNL    Ok(entries)NL}NLNLfn main() -> rusqlite::Result<()> {NL    let conn = Connection::open("db.sqlite")?;NL    conn.execute("\NL    CREATE TABLE IF NOT EXISTS Entries(NL              ID INTEGER PRIMARY KEY_NL              Title CHAR(512)_NL              Content TEXT);NL    "_NL    NO_PARAMS)?;NLNL    let entry_1 = Entry {NL        id: 0_NL        title: String::from("Entry Number One")_NL        content: String::from("This is the text for my entry.")NL    };NLNL    let entry_2 = Entry {NL        id: 1_NL        title: String::from("Le Second Entreee")_NL        content: String::from("2. What is 2? Can you taste it?")NL    };NLNL    insert_entry(&conn_&entry_1)?;NL    insert_entry(&conn_&entry_2)?;NLNLNLNL    println!("{:?}"_ all_entries(&conn));NLNL    Ok(())NL}NL```
558847695972728852,emccue,462,```NL/Users/emccue/.cargo/bin/cargo run --color=always --package sequel --bin sequelNL   Compiling sequel v0.1.0 (/Users/emccue/Development/sequel)NL    Finished dev [unoptimized + debuginfo] target(s) in 1.63sNL     Running `target/debug/sequel`NLOk([Entry { id: 1_ title: "Entry Number One"_ content: "This is the text for my entry." }_ Entry { id: 2_ title: "Le Second Entreee"_ content: "2. What is 2? Can you taste it?" }])NLNLProcess finished with exit code 0NL```
558847781683462144,emccue,21,`rusqlite = "0.17.0"`
558847811672735797,emccue,39,and that is the only library i am using
558848335918661642,MemoryError,43,that's gonna take a long time to understand
558848353073365003,MemoryError,6,for me
558848426612228096,MemoryError,39,im still in ch one in the rust tutorial
558849214507909130,emccue,10,thats fair
558849338047201291,emccue,88,C is definitely a simpler language in terms of number of concepts you need to understand
558849745087365120,kenndel,35,i thought that was haskell at first
558849768676392980,kenndel,30,rust is an intersting language
558849807813312533,kenndel,17,haskell + c + c++
558850073497436180,emccue,0,
558850121387737100,emccue,97,`For the third year in a row_ Rust is the most loved programming language among our respondents_`
558850842598572033,MemoryError,4,link
558850856007630848,emccue,98,Not a quality assessment_ but I want to frontload good press because the language is hard to learn
558850903638016010,emccue,58,https://insights.stackoverflow.com/survey/2018/#technology
558850995887669259,emccue,51,but once you learn it people tend to really like it
558851020298387476,MemoryError,20,where's the 2019 one
558851159087906828,emccue,33,in the future because it is march
558851663041921035,somebody,2,ew
558851694969094144,somebody,6,python
558851715261005824,somebody,12,is third wtf
558851866746945536,somebody,117,i think python is misrepresented (and to an extent JS too) because they're usually the only language respondents know
558851885835091998,somebody,37,so they have nothing to compare it to
558852088206065664,somebody,76,well_ not that people know more than one language for other languages though
558852211132596234,somebody,85,but i guess it's that they have a bit of an advantage from being scripting languages?
558852353717960714,emccue,48,Hey mods_ just thinking out loud without context
558852400274997276,somebody,29,also 🤔 rust is hard to learn?
558852526523285506,emccue,92,is there a way to give people badges for what languages and tools they are comfortable with?
558852648355233830,emccue,103,It would save me quite a bit of time asking people to get context on what is limiting their perspective
558852913628446721,somebody,24,😦 aww we can't ping mods
558852984042422272,somebody,56,re: "what languages and tools they are comfortable with"
558853030074646550,somebody,62,would there need to be guidelines on what counts/doesn't count
558853309641785358,emccue,104,<@153146360705712128> What languages are you comfortable with and can use. You choose where that line is
558853360132947979,emccue,45,And have you done a larger project in python?
558853458879315974,somebody,39,depending on the meaning of larger_ yes
558853511920484394,somebody,49,i haven't done larger as in multiple people large
558853590522003456,XpertAaron,94,For a second there I thought discord had brought back the mention somebody April fool's thingy
558853627087683594,somebody,3,lol
558854101497020437,somebody,115,re: python. sure_ it isn't _bad_. but no way is it _that_ much better than literally every other scripting language
558855234063958047,emccue,90,I think that has far less to do with the language itself and more to do with the ecosystem
558855431162953748,somebody,17,🤔 hmm. fair point
560608522220339220,emccue,47,I think large project might be the wrong phrase
560608555485495298,emccue,46,"projects that have more than one source file"
560608849367793675,emccue,104,just take my word for it_ as someone who pushed his projects to github when they were 15-16_ it pays off
560608896725680139,emccue,21,itll just take awhile
560621397781643274,somebody,92,<@194861788926443520> not the best for working across multiple devices - cloud9 is a thing 😛
560621511812317215,somebody,59,<@205069548595052544> i started a kinda large project at 16
560624853645000715,Anti,60,I've been doodling around with making my own compiler today.
560625090169929739,Anti,124,I decided not to tokenize all of the characters and digits in identifiers and numeric literals 'cause I kinda don't have to?
560625148944711700,Anti,106,And going out of my way to do that makes a lot more work to put those things back together properly later.
560625169677287424,Anti,34,A side effect is I get to do this:
560625187469656074,Anti,47,```NL0xafe_starts_with_a_number :int = 0xafe;```
560625237847310336,Anti,19,Tokenizer's output:
560625277525426196,Anti,468,```NLLine:                        Token:                   Token Type:NL00001    0xafe_starts_with_a_number                  ALPHANUMERICNL00001                             :                   TYPE_MARKERNL00001                           int                  ALPHANUMERICNL00001                             =                    ASSIGNMENTNL00001                         0xafe           HEXADECIMAL_LITERALNL00001                             ;                   END_OF_LINE```
560625674063183872,Anti,205,My thinking is I can define numbers in the grammar in such a way that the parser looks for BINARY_LITERAL_ HEXADECIMAL_LITERAL_ or DECIMAL_LITERAL tokens instead of caring about the contents of the tokens.
560625744573759489,Anti,80,'Cause the lexer already ensures those will be put together and tagged properly.
560627417832488960,somebody,66,<@326422614073671681> why would the parser care about the contents
560627597294174219,somebody,132,if you mean the lexer outputting `BINARY_LITERAL` instead of the parser figuring which one it is then that's done very_ _very_ often
560627958860218388,Zombie_Pigdragon,88,The way I (badly) did it was a Token struct with an enum for type and a string for value
560628209029349396,somebody,3,uhh
560628235445207086,somebody,40,isn't that the conventional way to do it
560628306182144001,Anti,97,The parser would care if it were looking to make sure that the token matched the production rule.
560628325261901824,somebody,39,well some people use subclass of `Node`
560628378672300033,somebody,26,<@326422614073671681> hmm?
560628537028116481,somebody,56,<@242066553183404032> it pays off right from the start 😛
560628546104721428,Anti,39,```NLnumber = 1-9NLnumber = 1-9 number```
560628553712926735,Anti,16,that kinda thing
560628620008357891,Anti,63,the parser would need to check that the token fits the terminal
560628709594497025,somebody,4,hmm?
560628758306881622,Anti,20,the production rules
560628782440906752,Anti,24,for how to build numbers
560628864800260098,somebody,53,yeah normally you'd just have a terminal for `NUMBER`
560628898304491521,somebody,38,the parser does _not_ need to know how
560628950120792073,Anti,35,i think that's what i was thinking/
560628987722858496,Anti,44,since i'm not splitting up numbers per digit
560629037878476800,Anti,44,i just define the production rule like this:
560629144233181185,Anti,84,```NLnumber = BINARY_LITERALNLnumber = HEXADECIMAL_LITERALNLnumber = DECIMAL_LITERAL```
560629175355179038,somebody,108,then wdym "The parser would care if it were looking to make sure that the token matched the production rule"
560629187031859211,Anti,82,and give the parser some way to understand that i'm talking about token type there
560629211027734528,somebody,1,😐
560629264974610442,Anti,66,Consider the case where I tokenized all of the digits in a number.
560629312265519122,Anti,80,The parser would have to realize all of the digits were part of a single number.
560629409372045334,Anti,118,Meaning it'd have to check the contents of the tokens to make sure they matched the terminals in the production rules.
560629481702686721,somebody,183,```NLnumber = BINARY_LITERAL {% Token(BINARY_LITERAL_ item) %}NL  | HEXADECIMAL_LITERAL {% Token(HEXADECIMAL_LITERAL_ item) %}NL  | DECIMAL_LITERAL {% Token(DECIMAL_LITERAL_ item) %}NL```
560629651391905843,somebody,69,"I tokenized all of the digits in a number." - together or separately
560629758489001984,Anti,60,I'm not sure why you're having a hard time understanding me.
560629791053840384,somebody,142,what i'm saying is the parser _doesn't need to know_ what the lexer does. it's a lot easier if you just assume the lexer is behaving correctly
560629793889058846,Anti,45,In the case where 999 got tokenized to 9 9 9.
560629971949715467,Anti,118,Then it'd need to look at the contents of the tokens rather than just being happy that they're numeric literal tokens.
560630103969890305,Anti,21,I'm doing the latter.
560630151319388188,somebody,10,of course?
560630518572646411,Anti,185,The interesting bit was I wound up in a situation where I can start identifiers with numbers_ which is only interesting because I don't recall seeing any serious languages ever do that.
560630532661313536,Anti,17,But it's trivial.
560630618539687949,Anti,44,So I'm wondering why that isn't more common.
560630638986788878,somebody,98,"I don't recall seeing any serious languages ever do that." - of course... it's hard to understand
560630657789853707,somebody,17,it's confusing...
560630768183934986,somebody,31,well actually... lisp does that
560630941073276929,Anti,5,Well.
560631096358993930,Anti,67,If someone makes a variable like 0x1af6gfe43_ that's his own fault.
560631123722633216,Anti,40,Just like using single letter variables.
560631169050214401,Anti,63,Or variables whose names have nothing to do with their purpose.
560631237266636830,somebody,3,...
560631292186591242,somebody,53,when would naming a variable like that ever be useful
560631307693195292,Anti,9,It's not.
560631317255946249,Anti,16,That's my point.
560631324113895454,somebody,7,exactly
560631369730883594,somebody,56,which means it _shouldn't be allowed_ in the first place
560631384083791909,Anti,3,Uh.
560631386906689554,Anti,3,No.
560631405990772746,Anti,29,That was an exaggerated case.
560631417097420801,somebody,62,programming languages aren't designed to make your life harder
560631484097232896,Anti,43,But I might want something like 2hard2code.
560631542888792105,somebody,31,don't really need numbers there
560631544281300993,Anti,39,In that case it's not confusing at all.
560631589743362048,Anti,38,You're kind of missing the point_ tbh.
560631617899593779,somebody,23,`64BitInteger`... maybe
560631648966672385,Anti,26,Something like that_ sure.
560631657967910912,somebody,60,but it's only in very rare cases that it's actually readable
560631684047831071,Anti,22,Yeah_ and that's fine.
560631784266661899,somebody,48,the disadvantages outweigh the advantages though
560631795914375188,Anti,144,Every sane developer will follow decent naming conventions outside of the few situations where having a number at the start makes perfect sense.
560631809268776960,Anti,26,And the insane devs_ well.
560631812901306409,somebody,33,i'm not saying that's a bad thing
560631820857901087,Anti,24,There's no helping them.
560631867825455104,somebody,65,i'm just answering "So I'm wondering why that isn't more common."
560631870921113600,Anti,54,They already have plenty of tools to shoot their feet.
560631909152063497,Anti,7,I mean.
560631972183932929,Anti,97,I had originally thought it was because it was just too hard to get compilers to understand that.
560632016404742155,Anti,56,The topic got swept under the rug with that explanation.
560632067885629470,Anti,58,But now that I'm looking at it_ it's clearly not an issue.
560632111590015018,Anti,7,I mean.
560632181404467201,Anti,43,I don't think it really makes things worse.
560632188538978310,somebody,33,of course it was never an issue 😐
560632344587796510,Anti,3,ken
560632349654515743,Anti,9,nice edit
560632442889699352,somebody,39,it exists in a language written in 1984
560633007753527305,somebody,132,"I don't think it really makes things worse." - ok_ sure_ but that's not what the people who manage most programming languages think
560633203573129237,Anti,70,People already have enormous freedom to make horrible variables names.
560633254110298122,Anti,62,We've hit diminishing returns for how much worse they can get.
560633355373379605,Anti,67,I'd rather not be opinionated about how good devs can use the tool.
560633372288876556,somebody,19,"enormous freedom"?
560633423140487198,Anti,5,emoji
560633457886363657,somebody,41,yeah that's not a thing in most languages
560633648232005644,Anti,79,i'd think any compiler that understood unicode would have no problem with emoji
560633685963964436,Anti,65,it'd be more effort to stop strange characters than to allow them
560633750442999809,Anti,57,tho i generally approve of disallowing emoji in variables
560633780017299461,Anti,19,that's just too far
560633808089645066,somebody,75,"it'd be more effort to stop strange characters than to allow them" - no...
560633844793868311,somebody,25,they only allow _letters_
560633876490485761,somebody,11,and numbers
560633987916103710,somebody,69,and that's possible because there's a thing called unicode categories
560634257261985813,Anti,52,sounds like more effort than just ignoring the issue
560634262077046830,Anti,3,^:)
560634698511024159,somebody,3,nah
560634806703226890,somebody,29,regex: `[\p{L}][\p{L}\p{N}]+`
560634860117426176,somebody,51,would you look at that_ an identifier parsing regex
560635652878630912,Anti,92,Are you saying that got grandfathered into a lot of languages and happened to prevent emoji?
560635819241504778,somebody,2,no
560635863143546880,somebody,53,most languages don't even support unicode identifiers
560635891538722821,somebody,35,but those that do... yes. of course
560635951152627712,somebody,83,most languages have a regex engine powerful enough to handle that already anyway...
560635971993862154,somebody,27,why not take advantage of i
560954752565903404,emccue,37,its fascinating the power of defaults
560954801463099393,emccue,47,scala case classes have the worst toString ever
560954840210210843,emccue,25,but people never touch it
560954921818521600,emccue,27,`Thing(1_ 3_ apples_ 3_ 5)`
560954941179428865,emccue,24,real clear_ thanks scala
560998508774162511,modestas.ruksnaitis,282,Not a big deal_ IMHO. In my experience_ if I need to be stringifying a class I'd have worked with it enough to know what the fields are and just need to quickly see the values. Have any situations cropped up for you where it's important to learn the fields from the stringification?
